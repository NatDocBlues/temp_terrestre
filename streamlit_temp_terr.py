import streamlit as st
import pandas as pd
import seaborn as sns
import numpy as np
from matplotlib import pyplot
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split, GridSearchCV
from sklearn.metrics import root_mean_squared_error, mean_squared_error, r2_score, mean_absolute_error
from sklearn.preprocessing import StandardScaler
from sklearn.ensemble import RandomForestRegressor
import xgboost as xgb
from xgboost import plot_importance
from sklearn.linear_model import Lasso, LinearRegression
import plotly.express as px
import joblib
# import models

st.set_page_config(
    page_title="Temp√©rature Terrestre",
    page_icon="üåç",
    layout="wide",
    initial_sidebar_state="expanded"
)

# ------------------ DATAFRAME & DONNEES -------------------------------------------
Temp_CO2_Glob = pd.read_csv("https://data.giss.nasa.gov/gistemp/tabledata_v4/ZonAnn.Ts+dSST.csv")

temp = Temp_CO2_Glob[['Year', 'Glob', 'NHem', 'SHem']]
temp_reduit = temp.loc[(temp['Year'] >= 1900) & (temp['Year'] <= 2022)]

CO2_evol = pd.read_csv("https://nyc3.digitaloceanspaces.com/owid-public/data/co2/owid-co2-data.csv")
CO2 = CO2_evol[['year', 'country', 'population', 'co2', 'co2_per_capita', 'cumulative_co2', 'total_ghg',
                'co2_per_gdp', 'coal_co2', 'flaring_co2', 'gas_co2', 'oil_co2', 'cement_co2',
                'land_use_change_co2']]

CO2_continents = CO2.loc[(CO2['country'] == 'Africa') |
                         (CO2['country'] == 'Europe') |
                         (CO2['country'] == 'North America') |
                         (CO2['country'] == 'South America') |
                         (CO2['country'] == 'Asia') |
                         (CO2['country'] == 'Oceania')]

CO2_continents_reduit = CO2_continents.loc[CO2_continents['year'] >= 1900]
CO2_continents_reduit2 = CO2_continents_reduit.drop('total_ghg', axis = 1)
CO2_Glob = CO2_continents_reduit2.groupby('year').sum()

Temp_CO2_Glob = pd.merge(CO2_Glob, temp_reduit, left_on = 'year', right_on = 'Year')
Temp_CO2_Glob = Temp_CO2_Glob.set_index('Year')
Temp_CO2_Glob = Temp_CO2_Glob.drop('country', axis = 1)
Temp_CO2_Glob = Temp_CO2_Glob.rename(columns={
    'Glob': 'Anomalie Temp√©rature Globale (¬∞C)',
    'NHem': 'Anomalie Temp√©rature H√©misph√®re Nord (¬∞C)',
    'SHem': 'Anomalie Temp√©rature H√©misph√®re Sud (¬∞C)',
    'population': 'Population totale',
    'co2': '√âmissions de CO2 (Mt)',
    'co2_per_capita': '√âmissions de CO2 par Habitant (t/hab)',
    'cumulative_co2': 'CO2 Cumul√© (Mt)',
    'co2_per_gdp' : 'CO2 par PIB',
    'coal_co2' : 'CO2 li√© au charbon',
    'flaring_co2' : 'CO2 li√© au torchage',
    'gas_co2' : 'CO2 li√© au gaz',
    'oil_co2' : 'CO2 li√© au p√©trol',
    'cement_co2' : 'CO2 li√© au ciment',
    'land_use_change_co2' : "CO2 li√© au changement d'affectation des terres"})
# ---------------------------------------------------------

# --------------- JEU D'ENTRAINEEMNT ----------------------
feats = Temp_CO2_Glob.drop(['Anomalie Temp√©rature Globale (¬∞C)', 'Anomalie Temp√©rature H√©misph√®re Nord (¬∞C)',
                            'Anomalie Temp√©rature H√©misph√®re Sud (¬∞C)'], axis=1)
target = Temp_CO2_Glob['Anomalie Temp√©rature Globale (¬∞C)']
X_train, X_test, y_train, y_test = train_test_split(feats, target, test_size=0.25, random_state = 42)

scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

# ---------------- INTERFACE STREAMLIT ------------
st.title("üåç Temp√©rature terrestre : Analyse et Mod√©lisation")
st.sidebar.title("Sommaire")
pages=["Introduction", "Exploration des donn√©es", "Data Visualization", "Mod√©lisation", "Conclusion"]
page=st.sidebar.radio("Aller vers", pages)
st.sidebar.title("Contacts")
st.sidebar.write('Nathanael AOUIZERAT')
st.sidebar.write('Nicolas BINAUX')
st.sidebar.write('Guillaume LEBRUN')
st.sidebar.write('Alexandre MAGGI')

# -------------- PAGE 0 ------------------------------------
if page == pages[0]:
    st.write("## Contexte")
    st.write(
    """
    Le r√©chauffement climatique est un ph√©nom√®ne document√© depuis plus de 50 ans, avec des relev√©s de temp√©ratures et des observations scientifiques √† l‚Äô√©chelle mondiale.
    Ses manifestations sont d√©sormais visibles et incontestables : augmentation des vagues de chaleur, fonte acc√©l√©r√©e des glaciers, mont√©e du niveau des mers et bouleversements des √©cosyst√®mes. 
    Ces changements, largement attribu√©s aux √©missions de gaz √† effet de serre issues des activit√©s humaines, soul√®vent des enjeux cruciaux pour l‚Äôavenir de la plan√®te.
    """
)  
    st.write("### 100% des zones de la plan√®te sont touch√©es")
    st.write(
        """
        Dans ce contexte, comprendre et anticiper l‚Äô√©volution des temp√©ratures est essentiel et n√©cessite une compr√©hension approfondie des tendances futures. Les impacts du r√©chauffement sur les soci√©t√©s, les √©cosyst√®mes et les √©conomies rendent indispensables des outils capables de mod√©liser et d‚Äôanticiper les √©volutions √† venir.
        
        En s‚Äôappuyant sur des donn√©es climatiques collect√©es √† l‚Äô√©chelle mondiale, ce travail vise √† concevoir un mod√®le pr√©dictif pour estimer les tendances futures.
        """
    )        
    st.write("## Objectifs")
    st.markdown(
    """
    1. **Comprendre les datasets de donn√©es climatiques :**  
       - Explorer et comprendre les deux datasets.  
       - Explorer les variables disponibles et √©valuer les √©ventuelles limites des donn√©es (valeurs manquantes, compl√©tudes, biais historiques).
    """
)
    st.write("")  # Ajout d'une ligne vide
    st.markdown(
    """
    2. **Analyse exploratoire :**  
       - √âtudier les anomalies de temp√©rature globale et r√©gionale (√©volution des h√©misph√®res Nord/Sud).  
       - Analyser les tendances des √©missions de CO2 (globale, par habitant, par pays).  
       - D√©tecter les corr√©lations entre √©missions de CO2 et anomalies climatiques.
    """
)
    st.write("")  # Ajout d'une ligne vide
    st.markdown(
    """
    3. **Nettoyage et pr√©-processing :**  
       - Traitement des valeurs manquantes, non pertinentes ou redondantes.  
       - Fusion √©ventuelle des datasets.  
       - Agr√©gation des donn√©es lorsque c‚Äôest possible pour simplifier l‚Äôanalyse globale.  
       - Cr√©ation de nouvelles variables si besoin.
    """
)
    st.write("")  # Ajout d'une ligne vide
    st.markdown(
    """
    4. **Mod√©lisation :**  
       - Test sur plusieurs algorithmes (R√©gression lin√©aire, Lasso Regression, Random Forest, XGBoost).  
       - √âvaluation des performances √† l‚Äôaide de m√©triques (R¬≤, RMSE, MAE) et s√©lection du mod√®le.
    """
)



# --------------- PAGE 1 -----------------------------------
if page == pages[1] : 
  st.write("## Exploration des donn√©es")
  st.write('Extrait du dataset')
  st.dataframe(Temp_CO2_Glob.head(10))
  st.write('Dimensions du dataset')
  st.write(Temp_CO2_Glob.shape)
  st.write('Description du dataset')
  st.dataframe(Temp_CO2_Glob.describe())
  if st.checkbox("Afficher les NA") :
    st.dataframe(Temp_CO2_Glob.isna().sum())

# --------------- PAGE 2 -----------------------------------
if page == pages[2]:
    st.write("## Data Visualization")
  
    # Chargement des donn√©es
    try:
        temperature_data = pd.read_csv("https://data.giss.nasa.gov/gistemp/tabledata_v4/ZonAnn.Ts+dSST.csv")
    except Exception as e:
        st.error(f"Erreur lors du chargement des donn√©es : {e}")
        st.stop()

    # ---- Section : √âvolution des anomalies globales ----
    st.write("### 1. √âvolution des anomalies de temp√©ratures globales")
    st.write("""
    Ce graphique montre l'√©volution des anomalies de temp√©rature globale de 1880 √† 2023.
    ##### Observations principales :
  - Une relative stabilit√© jusqu‚Äôaux ann√©es 1940.
  - Une augmentation notable √† partir des ann√©es 1980, avec une acc√©l√©ration dans les ann√©es 2000.
  - Les temp√©ratures actuelles d√©passent souvent une anomalie de +1¬∞C, ce qui est significatif.
  - Cette tendance refl√®te l'impact des activit√©s humaines, comme l'industrialisation et l'utilisation de combustibles fossiles.
    """)
    fig = plt.figure(figsize=(8, 6))
    plt.plot(
        temperature_data["Year"],
        temperature_data["Glob"],
        label="Anomalies de temp√©rature Globale",
        color="blue"
    )
    plt.xlabel("Ann√©e")
    plt.ylabel("Temp√©rature (¬∞C)")
    plt.title("√âvolution des anomalies de temp√©ratures globales (1880-2023)")
    plt.legend()
    plt.grid(True)
    st.pyplot(fig)
    st.write("--------------------")
    # ---- Section : Comparaison des anomalies Nord/Sud ----
    st.write("### 2. √âvolution des anomalies de temp√©ratures - H√©misph√®re Nord et Sud")
    st.write("""
    Ce graphique compare les anomalies de temp√©ratures entre l'h√©misph√®re Nord et l'h√©misph√®re Sud.
    ##### Observations principales :
  - L‚Äôh√©misph√®re Nord (en rouge) montre une augmentation plus rapide des temp√©ratures par rapport √† l‚Äôh√©misph√®re Sud (en vert).
  - L‚Äô√©cart s‚Äô√©largit surtout apr√®s les ann√©es 1950, probablement √† cause de :
    - Une concentration plus importante de terres √©merg√©es dans l‚Äôh√©misph√®re Nord.
    - Une intensit√© plus √©lev√©e des activit√©s humaines dans cette r√©gion.
  - Ces diff√©rences r√©gionales illustrent des impacts vari√©s du changement climatique selon les zones g√©ographiques.
    """)
    fig = plt.figure(figsize=(8, 4))
    plt.plot(
        temperature_data["Year"],
        temperature_data["NHem"],
        label="H√©misph√®re Nord",
        color="red"
    )
    plt.plot(
        temperature_data["Year"],
        temperature_data["SHem"],
        label="H√©misph√®re Sud",
        color="green"
    )
    plt.xlabel("Ann√©e")
    plt.ylabel("Temp√©rature (¬∞C)")
    plt.title("Comparaison des anomalies de temp√©ratures entre l'h√©misph√®re Nord et Sud (1880-2023)")
    plt.legend()
    plt.grid(True)
    st.pyplot(fig)
    st.write("--------------------")
    # ---- Section : Distribution des anomalies ----
    st.write("### 3. Distribution des anomalies de temp√©rature globale")
    st.write("""
    Ce boxplot montre la distribution des anomalies de temp√©ratures globales sur toute la p√©riode d'analyse.
    ##### Observations principales :
    - La m√©diane (ligne au centre de la bo√Æte) est proche de 0, refl√©tant une relative stabilit√© pendant une grande partie de la p√©riode.
    - Une asym√©trie appara√Æt vers des valeurs positives, montrant un r√©chauffement global dans les ann√©es r√©centes.
    - Les points aberrants (outliers) repr√©sentent des ann√©es exceptionnelles o√π les anomalies √©taient particuli√®rement √©lev√©es.
    """)
    fig = plt.figure(figsize=(6, 4))
    sns.boxplot(x=temperature_data['Glob'], color="blue")
    plt.title("Distribution des anomalies de temp√©ratures globales")
    plt.xlabel("Temp√©rature (¬∞C)")
    st.pyplot(fig)
    st.write("--------------------")
    # ---- Section : Comparaison des anomalies Nord/Sud ----
    st.write("### 4. √âvolution des √©missions de CO2 par habitant pour des pays s√©lectionn√©s")
    st.write("""
    Ce graphique illustre les tendances des √©missions de CO2 par habitant (en tonnes) pour plusieurs pays au fil des ann√©es. Voici les principaux points d'analyse :
    ##### Observations principales :
    1. **√âtats-Unis (en bleu)** :
        - Les √âtats-Unis ont historiquement les √©missions par habitant les plus √©lev√©es, avec un pic autour de 20 tonnes par habitant dans les ann√©es 1970.
        - Depuis, une tendance √† la baisse est observ√©e, gr√¢ce √† des politiques de transition √©nerg√©tique et √† une meilleure efficacit√© √©nerg√©tique.
    2. **Chine (en orange)** :
        - La Chine montre une croissance marqu√©e des √©missions par habitant √† partir des ann√©es 1990, refl√©tant une industrialisation rapide.
        - Les √©missions par habitant restent inf√©rieures √† celles des √âtats-Unis, mais la tendance est croissante.
    3. **Inde (en vert)** :
        - L'Inde affiche des √©missions par habitant tr√®s faibles, m√™me avec sa forte croissance √©conomique.
        - Cela souligne les disparit√©s dans les contributions au CO2 entre les pays industrialis√©s et en d√©veloppement.
    4. **Russie (en rouge)** :
        - Les √©missions par habitant de la Russie connaissent une forte baisse apr√®s la chute de l'Union sovi√©tique dans les ann√©es 1990, mais elles se stabilisent ensuite.
    5. **Br√©sil (en violet)** :
        - Le Br√©sil a des √©missions mod√©r√©es et relativement stables par habitant, probablement en raison d'une utilisation plus importante des √©nergies renouvelables comme l'hydro√©lectricit√©.
    6. **France (en marron)** :
        - La France montre une baisse constante des √©missions par habitant gr√¢ce √† sa transition vers le nucl√©aire et les √©nergies renouvelables.
    """)
    # Filtrage des donn√©es pour les pays sp√©cifiques
    countries = ["United States", "China", "India", "Russia", "Brazil", "France"]
    country_data = CO2_evol[CO2_evol["country"].isin(countries)]
    # Gestion des donn√©es manquantes
    country_data = country_data.dropna(subset=["year", "co2_per_capita"])
    # Initialisation de la figure avec plt.subplots()
    fig, ax = plt.subplots(figsize=(14, 7))
    # Trac√© des courbes pour chaque pays
    for country in countries:
        country_subset = country_data[country_data["country"] == country]
        ax.plot(
            country_subset["year"],
            country_subset["co2_per_capita"],
            label=country
        )
    # Ajout des labels, titre, et l√©gende
    ax.set_xlabel("Ann√©e")
    ax.set_ylabel("√âmissions de CO2 par habitant (tonnes)")
    ax.set_title("√âvolution des √©missions de CO2 par habitant pour des pays s√©lectionn√©s")
    ax.legend()
    ax.grid(True)
    # Affichage du graphique dans Streamlit
    st.pyplot(fig)
    st.write("""
    - Ce graphique met en √©vidence des disparit√©s majeures entre les pays industrialis√©s et les pays √©mergents.
    - Les pays d√©velopp√©s comme les √âtats-Unis et la France ont amorc√© une r√©duction de leurs √©missions, tandis que les pays √©mergents comme la Chine et l'Inde augmentent leurs √©missions en raison de la croissance industrielle.
    - Ces tendances illustrent les d√©fis mondiaux pour atteindre les objectifs climatiques, notamment une transition √©quitable vers des √©conomies √† faible √©mission de carbone.
    """)
    st.write("--------------------")
    # ---- Matrice de corr√©lation ----
    st.write("### 5. Matrice de corr√©lation")
    st.write("""
    Cette matrice de corr√©lation montre les relations entre les diff√©rentes variables climatiques et socio-√©conomiques.
    Les corr√©lations mesurent la force et la direction de la relation entre deux variables :
        - **1.0** : Corr√©lation positive parfaite.
        - **-1.0** : Corr√©lation n√©gative parfaite.
        - **0.0** : Aucune corr√©lation.
    ##### Observations principales :
    1. Les **√©missions de CO2 totales** montrent une forte corr√©lation positive avec :
        - Les anomalies de temp√©rature globale (**0.94**).
        - Les anomalies de temp√©rature des h√©misph√®res Nord (**0.93**) et Sud (**0.95**).
     - Cela indique que l'augmentation des √©missions de CO2 est directement li√©e au r√©chauffement global.
    2. La **population totale** est fortement corr√©l√©e avec les √©missions de CO2 (**1.0**) :
        - Plus la population est importante, plus les √©missions de CO2 augmentent en raison des besoins en √©nergie et des activit√©s industrielles.
    3. Les √©missions li√©es √† diff√©rentes sources d'√©nergie (gaz, p√©trole, charbon) sont fortement corr√©l√©es entre elles :
        - Par exemple, **CO2 li√© au charbon** et **CO2 li√© au p√©trole** ont une corr√©lation de **0.99**, refl√©tant l'utilisation simultan√©e de ces sources d'√©nergie fossile.
    4. Les **anomalies de temp√©rature globale** pr√©sentent une forte corr√©lation avec :
        - Les √©missions de CO2 totales (**0.94**).
        - Les anomalies de temp√©rature dans les h√©misph√®res Nord (**0.98**) et Sud (**0.95**), ce qui montre un effet global mais plus prononc√© dans l‚Äôh√©misph√®re Nord en raison de l‚Äôintensit√© des activit√©s humaines.
    5. Le **CO2 li√© au changement d‚Äôaffectation des terres** a une faible corr√©lation avec les anomalies de temp√©rature (**-0.37 √† -0.41**) :
        - Cela peut s'expliquer par la complexit√© des interactions entre la d√©forestation et les √©missions directes ou indirectes.
    Ces observations soulignent l'importance de la r√©duction des √©missions de CO2 pour limiter les anomalies climatiques √† l'√©chelle mondiale.
    """)
    # Calcul de la matrice de corr√©lation pour les colonnes num√©riques uniquement
    numeric_data = Temp_CO2_Glob.select_dtypes(include=['float64', 'int64'])
    numeric_data = numeric_data.fillna(0)  # Remplacement des valeurs manquantes par 0
    correlation_matrix = numeric_data.corr()    # Visualisation de la matrice de corr√©lation avec Seaborn
    fig = plt.figure(figsize=(12, 10))
    sns.heatmap(
        correlation_matrix,
        annot=True,                # Affiche les valeurs dans les cellules
        fmt=".2f",                 # Format des valeurs avec deux d√©cimales
        cmap="coolwarm",           # Palette de couleurs
        linewidths=0.5,            # Ajoute des s√©parateurs entre les cellules
        cbar_kws={"shrink": 0.8}   # Ajuste la taille de la barre de couleurs
    )
    plt.title("Matrice de corr√©lation des variables climatiques et socio-√©conomiques", fontsize=16, pad=20)
    plt.xticks(fontsize=12, rotation=45, ha='right')  # Rotation etalignement des √©tiquettes sur l'axe x
    plt.yticks(fontsize=12)                           # Taille des √©tiquettes sur l'axe y
    st.pyplot(fig)
    st.write("--------------------")

# --------------- PAGE 3 -----------------------------------
if page == pages[3] :
    st.write("## Mod√©lisation")
    choix = ['XGBOOST', 'Lasso', 'Regression Lin√©aire', 'Random Forest']
    option = st.selectbox('### Choix du mod√®le', choix)
    st.write('### Le mod√®le choisi est :', option)

    model = joblib.load(f"{option}.joblib")
    # model.fit(X_train_scaled, y_train)
    y_pred = model.predict(X_test_scaled)

    rmse = root_mean_squared_error(y_test, y_pred)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)

    st.write("R2 jeu d'entrainement:", model.score(X_train_scaled, y_train))
    st.write("R2 jeu de test:", model.score(X_test_scaled, y_test))    
    st.write('RMSE:', rmse)
    # st.write('R2', r2)
    st.write('MSE', mse)
    st.write('MAE', mae)
    
    def plot_feature_importance(feature_importance, title):
        fig_fi = px.bar(feature_importance, x='Importance', y='Feature', orientation='h', title=title)
        st.plotly_chart(fig_fi)

    match option :
        case "Lasso":
            lasso_importances = pd.DataFrame({
                'Feature': feats.columns,
                'Importance': model.coef_
            }).sort_values(by='Importance', ascending=False)
            plot_feature_importance(lasso_importances, "Importance des caract√©ristiques - Lasso Regression")       
        
        case "XGBOOST":
            xgb_importances = pd.DataFrame({
                'Feature': feats.columns,
                'Importance': model.feature_importances_
            }).sort_values(by='Importance', ascending=False)
            plot_feature_importance(xgb_importances, "Importance des caract√©ristiques - XGBoost")        

        case "Regression Lin√©aire":
            linear_importances = pd.DataFrame({
                'Feature': feats.columns,
                'Importance': model.coef_
            }).sort_values(by='Importance', ascending=False)
            plot_feature_importance(linear_importances, "Importance des caract√©ristiques - R√©gression Lin√©aire")
            
        case "Random Forest":
            rf_importances = pd.DataFrame({
                'Feature': feats.columns,
                'Importance': model.feature_importances_
            }).sort_values(by='Importance', ascending=False)
            plot_feature_importance(rf_importances, "Importance des caract√©ristiques - Random Forest")
        
    st.write('### Simulation')

    col1a, col2a = st.columns(2)
    with col1a:
        slider_population  = st.slider('Population',0,100,50)
        slider_co2  = st.slider('CO2',0,100,50)
        slider_co2_per_capita = st.slider('CO2 per capita',0,100,50)
        slider_cumulative_co2 = st.slider('Cumulative CO2',0,100,50)
        slider_co2_per_gdp = st.slider('CO2 per GDP',0,100,50)
        slider_coal_co2 = st.slider('Coal CO2',0,100,50)
    
    with col2a:
        slider_flaring_co2 = st.slider('Flaring CO2',0,100,50)
        slider_gas_co2 = st.slider('Gas CO2',0,100,50)
        slider_oil_co2 = st.slider('Oil CO2',0,100,50)
        slider_cement_co2 = st.slider('Cement CO2',0,100,50)
        slider_land_use_change_co2  = st.slider('Land use change CO2',0,100,50)
    

# ------------------ PAGE : CONCLUSION -------------------
if page == pages[4]:
    st.write("## Conclusion")

    st.write("### Difficult√©s rencontr√©es")
    st.write(
        """
        - **Valeurs manquantes**  
          Les lacunes dans les donn√©es historiques (notamment avant 1900) ont n√©cessit√© des imputation et un ajustement rigoureux pour minimiser l‚Äôimpact sur les analyses.
          Les donn√©es avant 1900 ont √©t√© exclues gr√¢ce √† un filtrage explicite pour √©viter d‚Äôincorporer des donn√©es incompl√®tes.
              
        - **Disparit√©s r√©gionales**  
          Les variations r√©gionales importantes (entre continents et pays) ont complexifi√© l‚Äôinterpr√©tation des tendances globales.
          Les √©missions de CO2 ont √©t√© regroup√©es par continent pour une analyse simplifi√©e.
          Les anomalies de temp√©rature ont √©t√© compar√©es entre l‚Äôh√©misph√®re Nord et Sud.

        
        - **Mod√©lisation complexe**  
          L‚Äôajustement des hyperparam√®tres pour certains mod√®les (notamment XGBoost et Random Forest) a demand√© des it√©rations longues.  
          Des risques d‚Äôoverfitting ont √©t√© identifi√©s pour certains mod√®les avanc√©s, bien que des validations crois√©es aient permis de les att√©nuer.
        
        """
    )
    st.write("### R√©ponses aux objectifs")

    st.write(
        """
       1. **Comprendre les datasets de donn√©es climatiques :**  
       - Les datasets de la NASA (anomalies de temp√©rature) et de Global Change Data Lab (√©missions de CO2) ont √©t√© analys√©s, int√©gr√©s et fusionn√©s efficacement.  
       - Les variables cl√©s ont √©t√© identifi√©es et enrichies, et les limites des donn√©es (valeurs manquantes, biais historiques) ont √©t√© prises en compte.
       """
    )
    st.write("")  # Ajout d'une ligne vide

    st.write(
        """
    2. **Analyse exploratoire :**  
       - Les tendances des anomalies de temp√©rature globale et r√©gionale ont √©t√© mises en √©vidence, montrant une acc√©l√©ration depuis les ann√©es 1950.
       - Les disparit√©s r√©gionales (h√©misph√®res Nord/Sud, continents) et les contributions des principaux pays √©metteurs de CO2 (Chine, USA, Inde) ont √©t√© analys√©es.
       - Les corr√©lations fortes (‚âà 0,95) entre √©missions de CO2 et anomalies climatiques ont √©t√© confirm√©es.
       """
    )
    st.write("")  

    st.write(
        """
    3. **Nettoyage et pr√©-processing :**  
       - Les donn√©es ont √©t√© nettoy√©es avec succ√®s, fusionn√©es sur une cl√© commune (ann√©e) et enrichies avec de nouvelles variables (variation annuelle des √©missions, d√©calage temporel).
       - L‚Äôagr√©gation par continent a simplifi√© l‚Äôanalyse tout en pr√©servant les grandes tendances r√©gionales.
       """
    )
    st.write("")  

    st.write(
        """
    4. **Mod√©lisation :**  
       - Plusieurs algorithmes ont √©t√© test√©s (R√©gression lin√©aire, Lasso, Random Forest, XGBoost).
       - Le mod√®le Lasso Regression a √©t√© s√©lectionn√© comme le plus performant gr√¢ce √† un R¬≤ proche de 1 et une interpr√©tabilit√© claire, confirmant son aptitude √† pr√©dire les anomalies de temp√©rature.
       """
    )
    st.write("")  

    st.write("### R√©sultats compil√©s :")
    results_data = []
    for model_name in ["Regression Lin√©aire", "Lasso", "XGBOOST", "Random Forest"]:
        try:
            # Charger chaque mod√®le sauvegard√©
            model = joblib.load(f"{model_name}.joblib")
            y_pred = model.predict(X_test_scaled)
 
           # Collecter les m√©triques pour chaque mod√®le
            results_data.append({
                "Mod√®le": model_name,
                "R¬≤ (Train)": model.score(X_train_scaled, y_train),
                "R¬≤ (Test)": model.score(X_test_scaled, y_test),
                "MSE (Test)": mean_squared_error(y_test, y_pred),
                "RMSE (Test)": root_mean_squared_error(y_test, y_pred),
                "MAE (Test)": mean_absolute_error(y_test, y_pred)
            })
        except Exception as e:
          st.error(f"Erreur avec le mod√®le {model_name} : {e}")
 
    # Cr√©er un DataFrame pour afficher les r√©sultats
    results_df = pd.DataFrame(results_data)
 
    # Cr√©er un DataFrame fondu pour permettre l'animation
    df_melted = results_df.melt(id_vars="Mod√®le", var_name="M√©trique", value_name="Valeur")
 
    # D√©finir une plage dynamique maximale pour chaque m√©trique
    range_dict = {
        "R¬≤ (Train)": [0, 1.5],
        "R¬≤ (Test)": [0, 1.5],
        "MSE (Test)": [0, df_melted[df_melted["M√©trique"] == "MSE (Test)"]["Valeur"].max() * 1.2],
        "RMSE": [0, df_melted[df_melted["M√©trique"] == "RMSE"]["Valeur"].max() * 1.2],
        "MAE": [0, df_melted[df_melted["M√©trique"] == "MAE"]["Valeur"].max() * 1.2],
    }
 
    # Cr√©er le graphique anim√© avec des plages sp√©cifiques pour chaque m√©trique
    fig = px.bar(
        df_melted,
        x="Mod√®le",
        y="Valeur",
        color="Mod√®le",
        animation_frame="M√©trique",
        title="√âvolution des performances par m√©trique",
        labels={"Valeur": "Valeur", "Mod√®le": "Mod√®le", "M√©trique": "M√©trique"},
    )
 
    # Ajouter des plages dynamiques pour chaque m√©trique
    fig.update_layout(
        yaxis=dict(range=[0, max(range_dict.values(), key=lambda x: x[1])[1]])
    )
 
    # Afficher les valeurs sur les barres
    fig.update_traces(texttemplate="%{y:.3f}", textposition="outside")
 
    # Afficher le graphique dans Streamlit
    st.plotly_chart(fig)
 
    # Ajouter un texte explicatif
    st.write("### Analyse des performances des mod√®les")
  
    # Transformation en format long
    results_melted = results_df.melt(id_vars="Mod√®le", var_name="M√©trique", value_name="Valeur")        
 
    # Afficher les r√©sultats sous forme de tableau
    st.dataframe(results_df, use_container_width=True)

    # Cr√©er les heatmaps √† partir des r√©sultats
    st.write("### Heatmap des r√©sultats")
 
    # Calcul des rangs (inversion pour les m√©triques o√π une valeur plus basse est meilleure)
    results_ranked = results_df.copy()
    for metric in ["MSE (Test)", "RMSE (Test)", "MAE (Test)"]:
        results_ranked[metric] = results_df[metric].rank(ascending=True)  # Plus bas est mieux
    for metric in ["R¬≤ (Train)", "R¬≤ (Test)"]:
        results_ranked[metric] = results_df[metric].rank(ascending=False)  # Plus haut est mieux
 
    # Transposer pour les heatmaps
    values_heatmap = results_df.set_index("Mod√®le").T
    ranked_heatmap = results_ranked.set_index("Mod√®le").T
 
    # Afficher les deux heatmaps c√¥te √† c√¥te
    col1, col2 = st.columns(2)

    with col1:
        st.write("#### Valeurs r√©elles")
        fig_values = px.imshow(
            values_heatmap,
            labels={"x": "Mod√®le", "y": "M√©trique", "color": "Valeur"},
            title="Heatmap des valeurs r√©elles",
            text_auto=True,
            color_continuous_scale="Blues",
            width=500,
            height=500
        )
        st.plotly_chart(fig_values)
 
    with col2:
        st.write("#### Classements")
        fig_ranks = px.imshow(
            ranked_heatmap,
            labels={"x": "Mod√®le", "y": "M√©trique", "color": "Classement"},
            title="Heatmap des classements",
            text_auto=True,
            color_continuous_scale="Greens",
            width=500,
            height=500
        )
        st.plotly_chart(fig_ranks)

    

    st.write("""
    Ce graphique permet de visualiser les performances des diff√©rents mod√®les selon plusieurs indicateurs :
    - **R¬≤ (Train/Test)** : Mesure la capacit√© des mod√®les √† expliquer la variance des donn√©es sur les ensembles d'entra√Ænement et de test.
    - **MSE (Test)** : Moyenne des erreurs quadratiques des pr√©dictions, plus elle est basse, mieux c'est.
    - **RMSE** : Racine de l'erreur quadratique moyenne, utile pour interpr√©ter les erreurs dans l'unit√© d'origine.
    - **MAE** : Moyenne des erreurs absolues, repr√©sentant l'√©cart moyen des pr√©dictions par rapport aux valeurs r√©elles.

    Les mod√®les ayant une aire plus √©tendue indiquent une meilleure performance globale. Par exemple :
    - **XGBoost** se distingue par une pr√©cision √©lev√©e sur les jeux de test.
    - **R√©gression Lin√©aire** montre une bonne g√©n√©ralisation mais des limites pour les erreurs (MAE et RMSE).
    """)

    st.write("## Conclusion g√©n√©rale")
    st.write("### Mod√®le s√©lectionn√© : XGBoost")
    st.write(
    """
    Apr√®s analyse, le mod√®le **XGBoost** a √©t√© s√©lectionn√© comme le meilleur mod√®le pour pr√©dire les anomalies de temp√©rature. Voici pourquoi :
    """
    )

    # **1. Performances sup√©rieures**
    st.write("#### 1. Performances sup√©rieures")
    st.write(
    """
    - XGBoost obtient les meilleurs scores parmi les mod√®les test√©s :  
      - **R¬≤ sur les donn√©es de test : 0.896**  
        Explique pr√®s de **90 %** de la variance des anomalies de temp√©rature.  
      - **RMSE : 0.112**  
        Montre une faible erreur quadratique moyenne des pr√©dictions.  
      - **MAE : 0.095**  
        Indique une erreur absolue moyenne tr√®s faible.  

    - Compar√© aux autres mod√®les :
      - R√©gression Lin√©aire : R¬≤ = 0.871, RMSE = 0.125, MAE = 0.105.  
      - Lasso Regression : R¬≤ = 0.829, RMSE = 0.144, MAE = 0.122.  
      - Random Forest : R¬≤ = 0.887, RMSE = 0.117, MAE = 0.099.  
      
    Ces r√©sultats confirment que XGBoost est le mod√®le le plus pr√©cis et fiable.
    """
)

    # **2. Adaptabilit√© aux donn√©es complexes**
    st.write("#### 2. Adaptabilit√© aux donn√©es complexes")
    st.write(
    """
    - XGBoost capture mieux les relations complexes et non lin√©aires entre les variables (√©missions de CO2, population, etc.) :  
      - Avec un **R¬≤ de 0.896** sur les donn√©es de test, il surpasse largement les mod√®les lin√©aires.  
      - Les interactions entre les √©missions par habitant, la population et d'autres variables sont bien mod√©lis√©es.  
      
    Cela lui permet de mieux expliquer les tendances que des mod√®les simples comme la R√©gression Lin√©aire (R¬≤ = 0.871).
    """
    )

    # **3. Robustesse face √† l'overfitting**
    st.write("#### 3. Robustesse face √† l'overfitting")
    st.write(
    """
    - XGBoost utilise une r√©gularisation int√©gr√©e qui r√©duit le risque d'overfitting :  
      - **R¬≤ sur les donn√©es d'entra√Ænement : 0.999**  
        Montre un ajustement quasi parfait.  
      - **R¬≤ sur les donn√©es de test : 0.896**  
        La faible diff√©rence entre ces scores montre une excellente capacit√© de g√©n√©ralisation.  

    - En comparaison :
      - Random Forest, bien qu'efficace, montre un R¬≤ l√©g√®rement inf√©rieur sur les donn√©es de test (0.887).  
      - Les mod√®les lin√©aires, bien qu'ils g√©n√©ralisent mieux, ont des performances globales inf√©rieures.  

    XGBoost offre ainsi un bon √©quilibre entre pr√©cision et robustesse.
    """
    )

    # ------------------- CHARGEMENT DU MOD√àLE XGBOOST ET SC√âNARIOS -------------------
# Charger le mod√®le XGBoost
    model = joblib.load("XGBOOST.joblib")
 
    st.write("## Pr√©dictions avec le mod√®le XGBoost")
 
# Sc√©narios
    scenarios = {
    "Sc√©nario actuel": {
        "Population totale": X_test["Population totale"].max(),
        "√âmissions de CO2 (Mt)": X_test["√âmissions de CO2 (Mt)"].max(),
        "√âmissions de CO2 par Habitant (t/hab)": X_test["√âmissions de CO2 par Habitant (t/hab)"].max(),
        "CO2 Cumul√© (Mt)": X_test["CO2 Cumul√© (Mt)"].max(),
        "CO2 par PIB": X_test["CO2 par PIB"].max(),
        "CO2 li√© au charbon": X_test["CO2 li√© au charbon"].max(),
        "CO2 li√© au torchage": X_test["CO2 li√© au torchage"].max(),
        "CO2 li√© au gaz": X_test["CO2 li√© au gaz"].max(),
        "CO2 li√© au p√©trol": X_test["CO2 li√© au p√©trol"].max(),
        "CO2 li√© au ciment": X_test["CO2 li√© au ciment"].max(),
        "CO2 li√© au changement d'affectation des terres": X_test["CO2 li√© au changement d'affectation des terres"].max()
    },
    "Population double, CO‚ÇÇ divis√© par 2": {
        "Population totale": X_test["Population totale"].max() * 2,
        "√âmissions de CO2 (Mt)": X_test["√âmissions de CO2 (Mt)"].max() / 2,
        "√âmissions de CO2 par Habitant (t/hab)": X_test["√âmissions de CO2 par Habitant (t/hab)"].max() / 2,
        "CO2 Cumul√© (Mt)": X_test["CO2 Cumul√© (Mt)"].max() / 2,
        "CO2 par PIB": X_test["CO2 par PIB"].max() / 2,
        "CO2 li√© au charbon": X_test["CO2 li√© au charbon"].max() / 2,
        "CO2 li√© au torchage": X_test["CO2 li√© au torchage"].max() / 2,
        "CO2 li√© au gaz": X_test["CO2 li√© au gaz"].max() / 2,
        "CO2 li√© au p√©trol": X_test["CO2 li√© au p√©trol"].max() / 2,
        "CO2 li√© au ciment": X_test["CO2 li√© au ciment"].max() / 2,
        "CO2 li√© au changement d'affectation des terres": X_test["CO2 li√© au changement d'affectation des terres"].max() / 2
    },
    "R√©duction massive des √©missions": {
        "Population totale": X_test["Population totale"].max(),
        "√âmissions de CO2 (Mt)": X_test["√âmissions de CO2 (Mt)"].max() * 0.2,
        "√âmissions de CO2 par Habitant (t/hab)": X_test["√âmissions de CO2 par Habitant (t/hab)"].max() * 0.2,
        "CO2 Cumul√© (Mt)": X_test["CO2 Cumul√© (Mt)"].max() * 0.2,
        "CO2 par PIB": X_test["CO2 par PIB"].max() * 0.2,
        "CO2 li√© au charbon": X_test["CO2 li√© au charbon"].max() * 0.2,
        "CO2 li√© au torchage": X_test["CO2 li√© au torchage"].max() * 0.2,
        "CO2 li√© au gaz": X_test["CO2 li√© au gaz"].max() * 0.2,
        "CO2 li√© au p√©trol": X_test["CO2 li√© au p√©trol"].max() * 0.2,
        "CO2 li√© au ciment": X_test["CO2 li√© au ciment"].max() * 0.2,
        "CO2 li√© au changement d'affectation des terres": X_test["CO2 li√© au changement d'affectation des terres"].max() * 0.2
    },
    "Augmentation des √©nergies fossiles": {
        "Population totale": X_test["Population totale"].max(),
        "√âmissions de CO2 (Mt)": X_test["√âmissions de CO2 (Mt)"].max() * 1.5,
        "√âmissions de CO2 par Habitant (t/hab)": X_test["√âmissions de CO2 par Habitant (t/hab)"].max() * 1.5,
        "CO2 Cumul√© (Mt)": X_test["CO2 Cumul√© (Mt)"].max() * 1.5,
        "CO2 par PIB": X_test["CO2 par PIB"].max() * 1.5,        
        "CO2 li√© au charbon": X_test["CO2 li√© au charbon"].max() * 1.5,
        "CO2 li√© au torchage": X_test["CO2 li√© au torchage"].max() * 1.5,    
        "CO2 li√© au gaz": X_test["CO2 li√© au gaz"].max() * 1.5,            
        "CO2 li√© au p√©trol": X_test["CO2 li√© au p√©trol"].max() * 1.5,
        "CO2 li√© au ciment": X_test["CO2 li√© au ciment"].max() * 1.5,
        "CO2 li√© au changement d'affectation des terres": X_test["CO2 li√© au changement d'affectation des terres"].max() * 1.5
    },
    "Transition vers les √©nergies renouvelables": {
        "Population totale": X_test["Population totale"].max(),
        "√âmissions de CO2 (Mt)": X_test["√âmissions de CO2 (Mt)"].max() * 0.1,
        "√âmissions de CO2 par Habitant (t/hab)": X_test["√âmissions de CO2 par Habitant (t/hab)"].max() * 0.1,
        "CO2 Cumul√© (Mt)": X_test["CO2 Cumul√© (Mt)"].max() * 0.1,
        "CO2 par PIB": X_test["CO2 par PIB"].max() * 0.1,        
        "CO2 li√© au charbon": X_test["CO2 li√© au charbon"].max() * 0.1,
        "CO2 li√© au torchage": X_test["CO2 li√© au torchage"].max() * 0.1,          
        "CO2 li√© au gaz": X_test["CO2 li√© au gaz"].max() * 0.1,
        "CO2 li√© au p√©trol": X_test["CO2 li√© au p√©trol"].max() * 0.1,
        "CO2 li√© au ciment": X_test["CO2 li√© au ciment"].max() * 0.1,
        "CO2 li√© au changement d'affectation des terres": X_test["CO2 li√© au changement d'affectation des terres"].max() * 0.1
    },
    "Croissance d√©mographique rapide": {
        "Population totale": X_test["Population totale"].max() * 3,
        "√âmissions de CO2 (Mt)": X_test["√âmissions de CO2 (Mt)"].max(),
        "√âmissions de CO2 par Habitant (t/hab)": X_test["√âmissions de CO2 par Habitant (t/hab)"].max(),
        "CO2 Cumul√© (Mt)": X_test["CO2 Cumul√© (Mt)"].max(),
        "CO2 par PIB": X_test["CO2 par PIB"].max(),        
        "CO2 li√© au charbon": X_test["CO2 li√© au charbon"].max(),
        "CO2 li√© au torchage": X_test["CO2 li√© au torchage"].max(),          
        "CO2 li√© au gaz": X_test["CO2 li√© au gaz"].max(),
        "CO2 li√© au p√©trol": X_test["CO2 li√© au p√©trol"].max(),
        "CO2 li√© au ciment": X_test["CO2 li√© au ciment"].max(),
        "CO2 li√© au changement d'affectation des terres": X_test["CO2 li√© au changement d'affectation des terres"].max()      
    },
    "Sc√©nario optimiste : r√©duction globale des √©missions": {
        "Population totale": X_test["Population totale"].max(),
        "√âmissions de CO2 (Mt)": X_test["√âmissions de CO2 (Mt)"].max() * 0.3,
        "√âmissions de CO2 par Habitant (t/hab)": X_test["√âmissions de CO2 par Habitant (t/hab)"].max() * 0.3,
        "CO2 Cumul√© (Mt)": X_test["CO2 Cumul√© (Mt)"].max() * 0.3,
        "CO2 par PIB": X_test["CO2 par PIB"].max() * 0.3,            
        "CO2 li√© au charbon": X_test["CO2 li√© au charbon"].max() * 0.3,
        "CO2 li√© au torchage": X_test["CO2 li√© au torchage"].max() * 0.3,          
        "CO2 li√© au gaz": X_test["CO2 li√© au gaz"].max() * 0.3,
        "CO2 li√© au p√©trol": X_test["CO2 li√© au p√©trol"].max() * 0.3,
        "CO2 li√© au ciment": X_test["CO2 li√© au ciment"].max() * 0.3,
        "CO2 li√© au changement d'affectation des terres": X_test["CO2 li√© au changement d'affectation des terres"].max() * 0.3  
    }
    }
 
# Afficher les sc√©narios dans une liste d√©roulante
    scenario_choice = st.selectbox("Choisissez un sc√©nario", list(scenarios.keys()))
    scenario_data = pd.DataFrame([scenarios[scenario_choice]])
 
# Afficher les donn√©es du sc√©nario
    st.write(f"### Donn√©es du sc√©nario : {scenario_choice}")
    st.dataframe(scenario_data)
 
# Appliquer le scaling sur les donn√©es du sc√©nario
    try:
        scenario_data_scaled = scaler.transform(scenario_data)
        predicted_anomaly = model.predict(scenario_data_scaled)
        st.write(f"üåç **Anomalie pr√©dite :** {predicted_anomaly[0]:.2f} ¬∞C")
    except Exception as e:
        st.error(f"Erreur : {e}")